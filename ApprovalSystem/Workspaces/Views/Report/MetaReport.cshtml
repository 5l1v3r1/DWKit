@using OptimaJet.Common
@using OptimaJet.Security.Providers
@using WebBjet.Reporting.Model
@using Workspaces.Controllers;

@Scripts.Render("~/bundles/mzPivotGrid")
@Styles.Render("~/Content/mzPivotGrid")


@model WebBjet.Reporting.Model.ReportModel<String>

@{
	Layout = null;
	var title = ViewBag.Title;
	ViewBag.Title = string.Format("{0} - {1}", title, Admin.DAL.Settings.ApplicationName);

	Layout = null;
	var configuration = Model.DataConfiguration;
	var user = SecurityCache.CurrentUser;
	var reportName = Model.ReportName;
	var keyColumnName = Model.KeyColumnName;
    var editForm = Model.EditForm;
	var disabled = IsGenerateReportDisabled();
	var getReportDataAction = "GetMetaReportData";
	var lang = SecurityCache.CurrentUser.Localization;
    if (string.IsNullOrWhiteSpace(lang))
    {  
        lang = "en";
    }
    var reportFormedState = (int)ReportStateEnum.ReportFormed;
	var reportNotFormedState = (int)ReportStateEnum.ReportNotFormed;
    var generateAllowed = CheckGeneratePermission();
}

@*@Scripts.Render(String.Format("~/Scripts/mzPivotGrid/mzPivotGrid/locale/mz-locale-{0}.js", lang))*@
@Scripts.Render(String.Format("~/bundles/MetaReport-{0}", lang))


@functions
{
	private string IsGenerateReportDisabled()
	{
		var state = Model.DataConfiguration.State;
		var enabled = state == ReportStateEnum.ReportFormed || state == ReportStateEnum.ReportNotFormed;

		return (!enabled).ToLowerCaseString();
	}
    
    private bool CheckGeneratePermission()
    {
        var result = false;
        if(ReportController.ReportPermissionsMap.ContainsKey(Model.ReportName))
        {
            var reportGroupCode = ReportController.ReportPermissionsMap[Model.ReportName];
            result = SecurityCache.Provider.CheckPermission(reportGroupCode, "Generate");
        }

        return result;
    }

	private bool GetIsDiffReport()
	{
		return ViewData["IsDiffReport"] == null ? false : (bool)ViewData["IsDiffReport"];
	}

	private string IsNotDiffReport()
	{
		return (!GetIsDiffReport()).ToLowerCaseString();
	}

	private string IsDiffReport()
	{
        return (GetIsDiffReport()).ToLowerCaseString();
	}

    private string IsGenerateHidden()
    {
        var generateAllowed = CheckGeneratePermission();

        return (!generateAllowed || GetIsDiffReport()).ToLowerCaseString();
    }
}

@Html.Hidden("CurrentLang", SecurityCache.CurrentUser.Localization)

<script type="text/javascript">
    Ext.onReady(function() {
        moment.locale('@lang');

        var texts = Ext.create('IIG.Texts', {});

        Ext.util.Format.thousandSeparator = '&nbsp;'; //TODO: remove if useless.
        $('.page-content').css("min-height", "");
        $('#layout-condensed-toggle').click(updatePanelSize);
        var budgetInfo = @Html.Raw(Json.Encode(@Model.BudgetInfo));
        var columns = @Html.Raw(Json.Encode(@configuration.Columns));
        var user = @Html.Raw(Json.Encode(@user));
        var reportId = '@configuration.ReportId';

        function getFields(columns) {
            var result = [];
            Enumerable.From(columns).ForEach(function(col) {
                result.push(col.dataIndex);
                if(budgetInfo != null && col.isDataSource != 0) {
                    result.push(col.dataIndex + '_1');
                }
            });

            return result;
        }

        Ext.define('MetaReport', {
            extend: 'Ext.data.Model',
            fields: getFields(columns)
        });

        IIG.Template.getProxy().on('exception', function(proxy, response, operation) {
            var window,
                message,
                query;
            if(operation.error) {
                optimajet.showError(texts.systemMessge, operation.error.statusText);
            } else {
                message = Ext.decode(response.responseText).message;
                query = Ext.ComponentQuery.query('saveconf');
                if (query.length == 0) return;

                window = query[0];
                window.close();
                optimajet.showError(texts.systemMessge, message);
            }
        });

        var store = new Ext.data.Store({
            autoLoad: false,
            model: 'MetaReport',
            pageSize: 100,
            proxy: {
                type: 'ajax',
                api: { read: '@Url.Action(getReportDataAction, "Report")' },
                timeout: 900000,
                reader: {
                    type: 'json',
                    root: 'data',
                    messageProperty : 'message'
                },
                extraParams: {
                    reportName: '@reportName'
                }
            },
            listeners: {
                beforeload: function () {
                    grid.setLoading(true);
                    if(@IsDiffReport()) {
						this.proxy.setExtraParam("BudgetVersionId1", budgetInfo.BudgetVersionId1);
                    this.proxy.setExtraParam("BudgetVersionId2", budgetInfo.BudgetVersionId2);
                }
            },
            load: function () {
                grid.setLoading(false);
            }
        }
        });

    var configurator = Ext.create('IIG.pivot.plugin.Configurator', {
        pluginId: 'configurator',
        fields: columns
    });

    var excel = Ext.create('Mz.pivot.plugin.ExcelExport', {
        pluginId: 'excelExport',
        showTitle: false
    });

    var drillDown = Ext.create('Mz.pivot.plugin.DrillDown', {
        columns: columns,
        keyColumnName: '@keyColumnName',
        editForm: '@editForm',
        dataUrl: 'Report/GetDrillDownData',
        exportActionUrl: 'Report/ExportDrillDown',
        reportName: '@title.Replace(" ", "_")'
    });

    var bufferedRenderer = Ext.create('Ext.grid.plugin.BufferedRenderer', {
        pluginId: 'bufrenderer',
        trailingBufferZone: 50,
        leadingBufferZone: 100,
        variableRowHeight: true
    });

    var grid = Ext.create('IIG.PivotGrid', {
        id: 'pivotGrid',
        keyColumnName: '@keyColumnName',
        store: store,
        plugins: [configurator, excel, bufferedRenderer, drillDown],
        budgetInfo: budgetInfo,
        isBudgetVersionsReport: @IsDiffReport(),
        needReloadFlag: false,
        needReloadMsg: new Ext.ToolTip({
            id: 'loadDataToolTip',
            anchor: 'bottom',
            anchorToTarget: false,
            style: {
                'white-space': 'nowrap',
            },
            dismissDelay: 5000,
            autoHide: true,
        }),
        bodyMask: null,
        listeners: {
            fieldsChanged: onGridFieldsChanged
        }
    });

    function onGridFieldsChanged(newFields) {
        if(newFields.length > 0) {
            if(grid.needReloadFlag) {
                return;
            }
            var btnLoadData = Ext.getCmp('btnLoadData');
            btnLoadData.el.highlight('f5f5f5', {
                iterations: 999999,
                endColor: 'FB4E52',
                duration: 1000,
                easing: 'ease'
            });

            grid.needReloadFlag = true;
            grid.needReloadMsg.html = '<div style="text-align: center;width: 100%;">' + grid.dataIsNotRelevantMessageText + '</div>';
            grid.needReloadMsg.targetXY = [btnLoadData.getX() + 15, btnLoadData.getY() + 10],
            grid.needReloadMsg.show();
        }
        else if(grid.needReloadFlag) {
            grid.needReloadFlag = false;
            grid.needReloadMsg.hide();
            Ext.get('btnLoadData').stopAnimation();
        }
    }

    Ext.EventManager.on(window, 'hashchange', function() {
        if(wndSelectBudgetVersions) {
            wndSelectBudgetVersions.hide();
        }
        if(grid.needReloadFlag) {
            grid.needReloadMsg.hide();
            grid.bodyMask.hide();
            Ext.get('btnLoadData').stopAnimation();
        }
        return true;
    });

    var miCreateTemplate = Ext.create('Ext.menu.Item', {
        id: 'tb-btn-create',
        text: texts.createTemplate,
        iconCls: 'fa fa-plus',
        handler: function() {
            var configuration = grid.getConfiguration(true);
            if (configuration.leftAxis.length > 0 || configuration.topAxis.length > 0) {
                var window = Ext.create('IIG.window.SaveConfiguration');
                if(budgetInfo != null) {
                    configuration.BudgetId1 = budgetInfo.BudgetId1;
                    configuration.BudgetId2 = budgetInfo.BudgetId2;
                    configuration.BudgetVersionId1 = budgetInfo.BudgetVersionId1;
                    configuration.BudgetVersionId2 = budgetInfo.BudgetVersionId2;
                    configuration.BudgetName1 = budgetInfo.BudgetName1;
                    configuration.BudgetName2 = budgetInfo.BudgetName2;
                    configuration.BudgetVersionName1 = budgetInfo.BudgetVersionName1;
                    configuration.BudgetVersionName2 = budgetInfo.BudgetVersionName2;
                }
                window.down('form')
                    .getForm()
                    .loadRecord(new IIG.Template({
                        AuthorName: user.Name,
                        AuthorId: user.Id,
                        ChangeDate: new Date(),
                        ChangeEmployeeId: user.Id,
                        ChangeEmployeeName: user.Name,
                        ReportId: reportId,
                        Value: Ext.encode(configuration)
                    }));
                window.show();
            } else {
                optimajet.showError(texts.systemMessage, texts.selectFieldsToProcessReport);
            }
        }
    });

    var miUpdateTemplate = Ext.create('Ext.menu.Item', {
        id: 'tb-btn-update',
        text: texts.editTemplate,
        disabled: true,
        iconCls: 'fa fa-paste',
        handler: function() {
            var configuration = grid.getConfiguration(true);
            if (configuration.leftAxis.length > 0 || configuration.topAxis.length > 0) {
                var template = this.up('toolbar').template;
                var window = Ext.create('IIG.window.SaveConfiguration');
                var form = window.down('form').getForm();
                form.loadRecord(template);

                form.findField('ChangeDate').setValue(new Date());
                form.findField('ChangeEmployeeName').setValue(user.Name);
                form.findField('ChangeEmployeeId').setValue(user.Id);
                form.findField('Value').setValue(Ext.encode(configuration));

                if(budgetInfo != null) {
                    form.findField('BudgetId1').setValue(budgetInfo.BudgetId1);
                    form.findField('BudgetId2').setValue(budgetInfo.BudgetId2);
                    form.findField('BudgetVersionId1').setValue(budgetInfo.BudgetVersionId1);
                    form.findField('BudgetVersionId2').setValue(budgetInfo.BudgetVersionId2);
                    form.findField('BudgetName1').setValue(budgetInfo.BudgetName1);
                    form.findField('BudgetName2').setValue(budgetInfo.BudgetName2);
                    form.findField('BudgetVersionName1').setValue(budgetInfo.BudgetVersionName1);
                    form.findField('BudgetVersionName2').setValue(budgetInfo.BudgetVersionName2);
                }

                window.show();

            } else {
                optimajet.showError(texts.systemMessage, texts.selectFieldsToProcessReport);
            }
        }
    });

    var miDeleteTemplate = Ext.create('Ext.menu.Item', {
        id: 'tb-btn-delete',
        text: texts.deleteTemplate,
        disabled: true,
        iconCls: 'fa fa-trash-o',
        handler: function() {
            var template = this.up('toolbar').template;
            optimajet.showQuestion(texts.systemMessage, texts.doYouRealyWantDelete + ' '+ template.get('Name') + '?', function(answr) {
                if (answr != 'ok')
                    return;
                template.destroy();
                templateStore.sync();
                Ext.getCmp('cmb-template').clearValue();
            });
        }
    });


    var templateMenu = Ext.create('Ext.menu.Menu', {
        id: 'templateMenu',
        items: [miCreateTemplate, miUpdateTemplate, miDeleteTemplate]
    });

    var templateStore = Ext.create('Ext.data.Store', {
        model: 'IIG.Template',
        id: 'templateStore',
        autoLoad: true,
        autoSync: true,
        proxy: {
            type: 'ajax',
            url: optimajet.CorrectUrl('Report/GetTemplates'),
            timeout: 900000,
            extraParams: {
                reportId: reportId
            },
            reader: {
                type: 'json',
                root: 'data'
            }
        }
    });

    function updateBudgetInfo(resetPivot) {
        drillDown.budgetVersionId1 = budgetInfo.BudgetVersionId1;
        drillDown.budgetVersionId2 = budgetInfo.BudgetVersionId2;

        grid.getMatrix().budgetName1 = budgetInfo.BudgetName1;
        grid.getMatrix().budgetName2 = budgetInfo.BudgetName2;
        grid.getMatrix().budgetVersionName1 = budgetInfo.BudgetVersionName1;
        grid.getMatrix().budgetVersionName2 = budgetInfo.BudgetVersionName2;
        Ext.getCmp('btnSelectVersions').setText(Ext.String.format('{0}: {1}-{2} <> {3}-{4}',
            texts.selectVersions, budgetInfo.BudgetName1, budgetInfo.BudgetVersionName1, budgetInfo.BudgetName2, budgetInfo.BudgetVersionName2));
    }

    var wndSelectBudgetVersions;

    function selectBudgetVersions() {
        if(budgetInfo.BudgetId1 == null) {
            budgetInfo.BudgetId1 = budgetInfo.CurrentBudgetId;
        }
        if(budgetInfo.BudgetId2 == null) {
            budgetInfo.BudgetId2 = budgetInfo.CurrentBudgetId;
        }
        wndSelectBudgetVersions = Ext.create('IIG.window.SelectBudgetVersions', {
            budgetInfo: budgetInfo
        });
        var form = wndSelectBudgetVersions.down('form').getForm();
        wndSelectBudgetVersions.on('close', function(arg) {
            updateBudgetInfo(true);
        });
        wndSelectBudgetVersions.show();
    }

    function loadData() {
        var params = {
            aggregate: grid.getAggregate(),
            left: grid.getLeftAxis(),
            top: grid.getTopAxis(),
            reportName: grid.reportName,
            keyColumnName: grid.keyColumnName
        };
        Ext.get('btnLoadData').stopAnimation();
        if(grid.needReloadMsg) {
            grid.needReloadMsg.hide();
        }
        grid.getStore().clearData();
        store.load({
            params: {
                pivotConfiguration: Ext.encode(params),
                reportName: '@reportName'
            },
            callback:function(records, operation, success) {
                if (!success) {
                    if(operation.error) {
                        if(operation.error.statusText) {
                            optimajet.showError(texts.systemMessage, operation.error.statusText);
                        }
                        else {
                            optimajet.showError(texts.systemMessage, operation.error);
                        }
                    }
                    else {
                        optimajet.showError(texts.systemMessage, 'Unknown error');
                    }
                }
            }
        });
        grid.needReloadFlag = false;
    }

    var toolbar = Ext.create('Ext.toolbar.Toolbar', {
        region: 'north',
        cls: 'pivot-toolbar',
        template: null,
        items:
            [{
                id: 'btnLoadData',
                text: texts.loadData,
                iconCls: 'fa fa-refresh',
                handler: loadData
            }, {
                text: texts.export,
                iconCls: 'fa fa-download',
                handler: function() {
                    var configuration = grid.getConfiguration(true);
                    if (configuration.leftAxis.length == 0 && configuration.topAxis.length == 0) {
                        optimajet.showError(texts.systemMessage, texts.selectFieldsToProcessReport);
                        return;
                    }
                    var f = excel.getExcelData(false);
                    var xhr = new XMLHttpRequest();
                    var url = 'Report/GetExcel/'
                    var responseType = 'blob';
                    if(typeof Blob == 'undefined' && !Boolean(window.URL)) {
                        responseType = 'text';
                        url = 'Report/GetExcelLegacy/';
                    }
                    xhr.open('POST', optimajet.CorrectUrl(url), true);
                    xhr.responseType = responseType;
                    xhr.onload = function(e) {
                        var a = document.createElement('a');
                        a.style.display = 'none';
                        var title = '@title';
                        if(typeof Blob != 'undefined' && typeof window.navigator.msSaveBlob != 'undefined') {
                            var blob = new Blob([xhr.response], {type:'text/xml'});
                            window.navigator.msSaveBlob(blob, Ext.String.format("{0}.xls", title));
                        } else if(window.URL) {
                            a.href = window.URL.createObjectURL(xhr.response);
                            a.download = Ext.String.format("{0}.xls", title);
                            document.body.appendChild(a);
                            a.click();
                            delete a;
                        } else {
                            var fileId = xhr.responseText;
                            var urlFormat = 'Report/GetExcel?reportName={0}&fileId={1}';
                            var url = Ext.String.format(urlFormat, title, fileId);
                            a.href = optimajet.CorrectUrl(url);
                            document.body.appendChild(a);
                            a.click();
                            delete a;
                        }
                    }
                    xhr.send(f);
                }
            }, {
                text: texts.templateOperations,
                iconCls: 'fa fa-gears',
                menu: templateMenu
            }, {
                xtype: 'clerablecombo',
                id: 'cmb-template',
                emptyText: texts.selectTemplate,
                width: 250,
                store: templateStore,
                editable:false,
                triggerAction: 'all',
                tpl: Ext.create('Ext.XTemplate',
                    '<tpl for=".">',
                        '<div class="x-boundlist-item">{Name} - {AuthorName}</div>',
                    '</tpl>'
                ),
                displayTpl: Ext.create('Ext.XTemplate',
                    '<tpl for=".">',
                        '{Name} - {AuthorName}',
                    '</tpl>'
                ),
                valueField: 'Id',
                listeners: {
                    change: function(combo, newValue) {
                        var template = templateStore.findRecord('Id', newValue);
                        this.up('toolbar').template = template;

                        if (template == null) {
                            Ext.getCmp('tb-btn-update').setDisabled(true);
                            Ext.getCmp('tb-btn-delete').setDisabled(true);
                            grid.reconfigurePivot({ aggregate: [], leftAxis: [], topAxis: [] });
                            grid.getStore().clearData();
                            return;
                        }

                        var configuration = Ext.decode(template.data.Value);
                        configuration.suppressFieldsChangedEvent = true;
                        grid.reconfigurePivot(configuration);
                        Ext.getCmp('tb-btn-update').setDisabled(false);
                        Ext.getCmp('tb-btn-delete').setDisabled(false);
                        loadData();
                    }
                }
            }, {
                id: 'btn-create-report',
                text: texts.generateReport,
                iconCls: 'fa fa-bar-chart-o',
                disabled: @disabled,
                hidden: @IsGenerateHidden(),
                handler: function() {
                    var btnGenerateReport = Ext.getCmp('btn-create-report');
                    var btnReportState = Ext.getCmp('tb-text');
                    btnGenerateReport.setDisabled(true);
                    btnGenerateReport.setIconCls('x-mask-msg-text');

                    Ext.Ajax.request({
                        url: optimajet.CorrectUrl('Report/CreateReport'),
                        method: 'GET',
                        params: {
                            reportName: '@reportName'
                        },
                        success: function(response) {
                            var data = Ext.decode(response.responseText);
                            if(data.success) {
                                btnReportState.setText(data.data);
                            }
                            else {
                                optimajet.showError(texts.systemMessage, data.message);
                            }
                        },
                        failure: function(response, opts) {
                            optimajet.showError(texts.systemMessage, response.statusText);
                        },
                        callback: function(opt, success, response) {
                            btnGenerateReport.setDisabled(false);
                            btnGenerateReport.setIconCls('fa fa-bar-chart-o');
                        }
                    });
                }
            },{
                id: 'btnSelectVersions',
                text: texts.selectVersions,
                hidden: @IsNotDiffReport(),
                handler: selectBudgetVersions
            }, '->',
            {
                id: 'tb-text',
                text: '@configuration.Message',
                hidden: @IsDiffReport(),
                xtype: @IsGenerateHidden() ? 'tbtext' : 'button',
                menu: {
                    items: [{
                        text: texts.resetReportGenerationStatus,
                        hidden: @IsGenerateHidden(),
                        handler: function(menuItem) {
                            var me = this;
                            Ext.Ajax.request({
                                url: optimajet.CorrectUrl('Report/ResetReportGenerationStatus/'),
                                params: {
                                    reportName: '@reportName'
                                },
                                method: 'POST',
                                success: function(response, opts) {
                                    var responseObj = Ext.decode(response.responseText);
                                    var data = responseObj.data;
                                    var tbText = Ext.getCmp('tb-text');
                                    var btnGenerateReport = Ext.getCmp('btn-create-report');

                                    tbText.setText(data.Message);

                                    var btnEnabled = data.State == @reportFormedState || data.State == @reportNotFormedState;
                                    btnGenerateReport.setDisabled(!btnEnabled);
                                },
                                failure: function(response, opts) {
                                    optimajet.showError(texts.systemMessage, response.statusText);
                                }
                            });
                        }
                    }]
                }
            }]
    });

    var panel = Ext.create('Ext.panel.Panel', {
        id: 'reportContainer',
        layout: 'border',
        border: false,
        renderTo: 'maindiv',
        height: Ext.getBody().getViewSize().height - $('.header').height() - 50,
        items: [toolbar, grid]
    });

    function updatePanelSize() {
        var vs = Ext.getBody().getViewSize();
        panel.setHeight(vs.height - $('.header').height() - 50);
        panel.setWidth(vs.width - $('#main-menu').width() - 35);
    }

    $(window).resize(function() {
        updatePanelSize();
    });

    toolbar.doLayout();

    LastWSFormCaption = undefined;
    document.title = '@ViewBag.Title';

    if(@IsDiffReport() && (!budgetInfo.BudgetVersionId1 || !budgetInfo.BudgetVersionId2)) {
        selectBudgetVersions();
    }

    if(@IsDiffReport()) {
        Ext.define('IIG.pivot.plugin.configurator.ColumnWithDiff', {
        override: 'Mz.pivot.plugin.configurator.Column',

        isBudgetVersionsReport: true
    });
    }

    })
</script>
